name: ci

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  GOTOOLCHAIN: local

jobs:
  # check go mod clean
  go-mod-tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: |
            go.sum
            tools/go.sum

      - run: go mod tidy
        working-directory: tools

      # check go mod clean
      - run: go mod tidy
      - run: git diff --exit-code

  test:
    name: "${{ matrix.os }} tag=${{ matrix.tag }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        tag: [assert, release]
    env:
      GORACE: "halt_on_error=1"
    steps:
      - uses: actions/checkout@v4

      - shell: bash
        # so we can cache based on cgo and build tags
        run: echo "v=2;tag=${{ matrix.tag }}" > env.txt

      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: |
            env.txt
            go.sum
            tools/go.sum

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - run: go install gotest.tools/gotestsum@latest
        working-directory: tools

      - run: >-
          gotestsum --format=pkgname --format-hide-empty-pkg
          -- '-tags=${{ matrix.tag }}' -count=1 -coverprofile=coverage.txt -covermode=atomic ./...
        shell: bash

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - run: go build '-tags=${{ matrix.tag }}' -o tmp/try.exe
      - run: ./tmp/try.exe --help

      - run: rm "$(go env GOMODCACHE)/cache/download/" -rf
        if: runner.os == 'Linux'
        shell: bash
